@page "/chart"
<h3>Chart</h3>
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Services;
@inject KlinesService KlinesService;

<PageTitle>Index</PageTitle>

<div style="position: relative">

    <div style="background-color : black; position: absolute;">
    <BECanvas Width="1200" Height="800" @ref="_chartReferene"></BECanvas>
</div>

    <div style="position: absolute;  top: 0; left: 0;" @onmousemove="MouseMove" @onmouseout="MouseOut">
    <BECanvas Width="1200" Height="800" @ref="_overlayReference"></BECanvas>
</div>

</div>

@code {
    private Canvas2DContext _chartContext;
    private Canvas2DContext _overlayContext;

    protected BECanvasComponent _chartReferene;
    protected BECanvasComponent _overlayReference;

    private Utility _chart;
    private Utility _overlay;

    private bool shouldRender = false;

    private async Task MouseMove(MouseEventArgs e)
    {
           await _overlay.MouseMove(e);
    }

    private async Task MouseOut(MouseEventArgs e )
    {
        await _overlayContext.ClearRectAsync(0, 0, _overlay.Width, _overlay.Height);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {   
            this._chartContext = await this._chartReferene.CreateCanvas2DAsync();
            this._overlayContext = await this._overlayReference.CreateCanvas2DAsync();

            _chart = new Utility(_chartContext, _chartReferene);
            _overlay = new Utility(_overlayContext, _overlayReference);

            var candles = await KlinesService.GetKlines();// get data from websocket ? 
            //draw on timer

            //Console.WriteLine("candles length: " + candles.Length);
            //Console.WriteLine("inner array length " + candles[0].Length);
            //Console.WriteLine("timestamp " + candles[0][0]);
            //Console.WriteLine("open " + candles[0][1]);
            //Console.WriteLine("close "  + candles[0][4]);
            //Console.WriteLine("high " + candles[0][2]);
            //Console.WriteLine("low "+ candles[0][3]);

            if (candles.Length != 0)
            {
                for (int i = 0; i < candles.Length; i++)
                {
                    var timeStamp = long.Parse(candles[i][0].ToString());
                    var high = double.Parse(candles[i][1].ToString());
                    var open = double.Parse(candles[i][4].ToString());
                    var close = double.Parse(candles[i][2].ToString());
                    var low = double.Parse(candles[i][3].ToString());

                    var candle = new Candlestick(timeStamp, high, open, close, low);
                    _chart.candlesticks.Add(candle);
                }
            }
            else
            {
                //alert problem with api
            }

            await  _chart.Draw();
        }
        catch (Exception e)
        {
           Console.WriteLine(e.Message + e.StackTrace);
        }
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }
}
