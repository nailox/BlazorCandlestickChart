@page "/chart"
<h3>Chart</h3>
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using Services;
@inject KlinesService KlinesService;

<PageTitle>Index</PageTitle>

<div style="background-color : black" @onmousemove="MouseMove" @onmouseout="MouseOut">
    <BECanvas Width="1200" Height="800" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    private CandlestickChart _chart;

    private bool shouldRender = false;

    private async Task MouseMove(MouseEventArgs e)
    {
        //  await _chart.MouseMove(e);
        await _context.ClearRectAsync(0, 0, _chart.Width, _chart.Height);
        await _chart.Draw();
        await _chart.DrawLine(e.OffsetX, _chart.Height, e.OffsetX, 0, "white" );
    }

    private async Task MouseOut(MouseEventArgs e )
    {
        await _chart.MouseOut(e);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();

            _chart = new CandlestickChart(_context, _canvasReference);

            var candles = await KlinesService.GetKlines();
            //make last candle draw in real time 

            //Console.WriteLine("candles length: " + candles.Length);
            //Console.WriteLine("inner array length " + candles[0].Length);
            //Console.WriteLine("timestamp " + candles[0][0]);
            //Console.WriteLine("open " + candles[0][1]);
            //Console.WriteLine("close "  + candles[0][4]);
            //Console.WriteLine("high " + candles[0][2]);
            //Console.WriteLine("low "+ candles[0][3]);

            if (candles.Length != 0)
            {
                for (int i = 0; i < candles.Length; i++)
                {
                    var timeStamp = long.Parse(candles[i][0].ToString());
                    var high = double.Parse(candles[i][1].ToString());
                    var open = double.Parse(candles[i][4].ToString());
                    var close = double.Parse(candles[i][2].ToString());
                    var low = double.Parse(candles[i][3].ToString());

                    var candle = new Candlestick(timeStamp, high, open, close, low);
                    _chart.candlesticks.Add(candle);
                }
            }
            else
            {
                //alert problem with api
            }
         
          await  _chart.Draw();
        }
        catch (Exception e)
        {
           Console.WriteLine("Stack Trace: " + e.StackTrace);
        }
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }
}
